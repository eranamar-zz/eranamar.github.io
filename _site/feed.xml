<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.4.2">Jekyll</generator><link href="https://eranamar.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://eranamar.github.io/" rel="alternate" type="text/html"/><updated>2017-03-21T09:31:13+02:00</updated><id>https://eranamar.github.io/</id><title type="html">Theory Lunch</title><subtitle>Computer Science topics over lunch</subtitle><author><name>Eran Amar, Yosef Pogrow, Ron Shiff</name></author><entry><title type="html">Introduction to Hypergraphs</title><link href="https://eranamar.github.io/2017/03/16/Introduction-to-Hypergraphs.html" rel="alternate" type="text/html" title="Introduction to Hypergraphs"/><published>2017-03-16T00:00:00+02:00</published><updated>2017-03-16T00:00:00+02:00</updated><id>https://eranamar.github.io/2017/03/16/Introduction-to-Hypergraphs</id><content type="html" xml:base="https://eranamar.github.io/2017/03/16/Introduction-to-Hypergraphs.html">&lt;script type=&quot;math/tex&quot;&gt; \newcommand{\lyxlock}{} &lt;/script&gt; &lt;noscript&gt; &lt;div class=&quot;warning&quot;&gt; Warning: &lt;a href=&quot;http://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt; requires JavaScript to correctly process the mathematics on this page. Please enable JavaScript on your browser. &lt;/div&gt;&lt;hr /&gt; &amp;lt;/hr&amp;gt;&lt;/noscript&gt; &lt;div class=&quot;Unindented&quot;&gt; In this post, I will review some of the basic definitions about hypergraphs and sparsifiers on them. I will start from the very basic definitions about Graphs, then generalizing them to Hypergraphs. Later, I will present the definition of cuts sparsifiers and some lower bound related to them. &lt;/div&gt; &lt;h1 class=&quot;Section&quot;&gt; &lt;a class=&quot;toc&quot; name=&quot;toc-Section-1&quot;&gt;1&lt;/a&gt; Basic definitions in Graphs &lt;/h1&gt; &lt;div class=&quot;Unindented&quot;&gt; Let’s start from the very beginning - graphs. Graphs are fundamental objects in computer science, and they are used to model relations between objects. Formally, a &lt;i&gt;graph&lt;/i&gt; &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; G=\left(V,E,w\right) &lt;/script&gt; &lt;/span&gt; is a tuple of two sets, &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; V &lt;/script&gt; &lt;/span&gt; and &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; E &lt;/script&gt; &lt;/span&gt; and a function &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; w &lt;/script&gt; &lt;/span&gt;. &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; V &lt;/script&gt; &lt;/span&gt; is the set of &lt;i&gt;vertices&lt;/i&gt; (i.e. the elements), usually denoted as &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; \left[n\right]:=\left\{ 1,2,..,n\right\} &lt;/script&gt; &lt;/span&gt;, and &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; E &lt;/script&gt; &lt;/span&gt; is a set of &lt;i&gt;edges&lt;/i&gt; between those vertices (i.e. indicating which elements belongs to the relation the graph represents). An edge is just a set of two vertices, that is &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; e=\left\{ u,v\right\} \in E\subseteq\left\{ A\mid A\subseteq V,\:\:\left|A\right|=2\right\} &lt;/script&gt; &lt;/span&gt;. The function &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; w:\:E\rightarrow\mathbb{R}_{\ge0} &lt;/script&gt; &lt;/span&gt; assign non-negative weight for each edge in the graph, and called weight function. &lt;/div&gt; &lt;div class=&quot;Indented&quot;&gt; A &lt;i&gt;cut&lt;/i&gt; in a graph &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; G &lt;/script&gt; &lt;/span&gt; is a partition of &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; V &lt;/script&gt; &lt;/span&gt; into two sets, &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; \left(S,V\backslash S\right) &lt;/script&gt; &lt;/span&gt;. We say that an edge &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; e=\left\{ u,v\right\} &lt;/script&gt; &lt;/span&gt; &lt;i&gt;cross&lt;/i&gt; the cut defined by &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; S &lt;/script&gt; &lt;/span&gt; if and only if &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; S\cap e\ne\emptyset &lt;/script&gt; &lt;/span&gt; and &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; \left(V\backslash S\right)\cap e\ne\emptyset &lt;/script&gt; &lt;/span&gt;. Now we can talk about the &lt;i&gt;weight of the cut&lt;/i&gt;, that is, if we have a cut that is defined by &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; S &lt;/script&gt; &lt;/span&gt; and a weight function &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; w &lt;/script&gt; &lt;/span&gt; then, &lt;span class=&quot;MathJax_Preview&quot;&gt; &lt;script type=&quot;math/tex;mode=display&quot;&gt; w_{G}\left(S\right)=\sum_{\begin{array}{c} e\in E\\ e\cap S\notin\{\emptyset,e\} \end{array}}w(e) &lt;/script&gt; &lt;/span&gt; in words, the weight of a cut is the sum of weights of all edges that cross it. &lt;/div&gt; &lt;h1 class=&quot;Section&quot;&gt; &lt;a class=&quot;toc&quot; name=&quot;toc-Section-2&quot;&gt;2&lt;/a&gt; Generalizing to Hyper-Graphs &lt;/h1&gt; &lt;div class=&quot;Unindented&quot;&gt; Hypergraphs are generalization of graphs in the sense that edges may be of arbitrary size. Meaning that now &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; E\subseteq2^{V}\backslash\emptyset=\left\{ A\mid A\subseteq V,\:\:\left|A\right|&gt;0\right\} &lt;/script&gt; &lt;/span&gt;. For instance, &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; G=\left(\left[5\right],\left\{ \left\{ 4\right\} ,\left\{ 1,2,5\right\} \right\} \right) &lt;/script&gt; &lt;/span&gt; is a valid hypergraph with two edges: &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; \left\{ 4\right\} &lt;/script&gt; &lt;/span&gt; and &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; \left\{ 1,2,5\right\} &lt;/script&gt; &lt;/span&gt;. Note that the definition of &lt;i&gt;cuts&lt;/i&gt; and &lt;i&gt;cut weight&lt;/i&gt; can be transfer easily into hypergraphs because they stay the same as with regular graphs. &lt;/div&gt; &lt;div class=&quot;Indented&quot;&gt; Usually we will be interested in family of hypergraphs with limited size, that is, hypergraphs where each edge is of size at most &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; r &lt;/script&gt; &lt;/span&gt;. Such hypergraphs are said to be &lt;i&gt;r-uniform&lt;/i&gt;. &lt;/div&gt; &lt;h1 class=&quot;Section&quot;&gt; &lt;a class=&quot;toc&quot; name=&quot;toc-Section-3&quot;&gt;3&lt;/a&gt; Cuts Sparsification &lt;/h1&gt; &lt;div class=&quot;Unindented&quot;&gt; Let &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; \epsilon\in\left(0,1\right) &lt;/script&gt; &lt;/span&gt;. Given a hypergraph &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; H=\left(V,E\right) &lt;/script&gt; &lt;/span&gt; and a weight function &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; w &lt;/script&gt; &lt;/span&gt;, we say that a hypergraph &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; K=\left(V,E_{\epsilon},w\right) &lt;/script&gt; &lt;/span&gt; is &lt;i&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; \epsilon &lt;/script&gt; &lt;/span&gt;-cut-sparsifier&lt;/i&gt; of &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; H &lt;/script&gt; &lt;/span&gt; if &lt;i&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt; &lt;script type=&quot;math/tex;mode=display&quot;&gt; \forall S\subset V\qquad(1-\epsilon)\cdot w_{H}(S)\le w_{K}(S)\le(1+\epsilon)\cdot w_{H}(S) &lt;/script&gt; &lt;/span&gt; &lt;/i&gt;and the set &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; E_{\epsilon} &lt;/script&gt; &lt;/span&gt; may be any set in &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; 2^{V}\backslash\emptyset &lt;/script&gt; &lt;/span&gt;. &lt;/div&gt; &lt;div class=&quot;Indented&quot;&gt; It is not part of the definition, but the goal is to find cut-sparsifier that shrink the number of edges, that is, with the smallest &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; \left|E_{\epsilon}\right| &lt;/script&gt; &lt;/span&gt; possible. Whereas in regular graphs it is understood that we want to minimize the &lt;b&gt;number&lt;/b&gt; of edges, in hypergraphs we should also consider the &lt;b&gt;size&lt;/b&gt; of the edges in &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; E_{\epsilon} &lt;/script&gt; &lt;/span&gt;. That is, the quality of the sparsifier will be measure also with respect to the size of the edges in the resulting graph. For that we introduce the &lt;i&gt;total edge size&lt;/i&gt; of a hypergraph which is &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; \sum_{e\in E_{\epsilon}}\left|e\right| &lt;/script&gt; &lt;/span&gt;. &lt;/div&gt; &lt;h1 class=&quot;Section&quot;&gt; &lt;a class=&quot;toc&quot; name=&quot;toc-Section-4&quot;&gt;4&lt;/a&gt; Upper &amp;amp; Lower Bounds for Sparsification &lt;/h1&gt; &lt;div class=&quot;Unindented&quot;&gt; For regular graphs, we know how to reduce the number of edges to be &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; \mathcal{O}\left(n/\epsilon^{2}\right) &lt;/script&gt; &lt;/span&gt; for any &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; \epsilon\in\left(0,1\right) &lt;/script&gt; &lt;/span&gt;. That is surprising, because no matter how many edges there are in the original graph, which can be up to &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; n^{2} &lt;/script&gt; &lt;/span&gt;, there is an algorithms that can reduce the number of edges to &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; \mathcal{O}\left(n/\epsilon^{2}\right) &lt;/script&gt; &lt;/span&gt;, while maintaining approximately the same weights for all possible cuts in the graph. Moreover, that algorithm find the cut-sparsifier in polynomial time. &lt;/div&gt; &lt;div class=&quot;Indented&quot;&gt; Later results show that this upper bound is also a lower bound, that is, there are graphs that cannot be reduced into less that &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; \mathcal{O}\left(n/\epsilon^{2}\right) &lt;/script&gt; &lt;/span&gt; edges. &lt;/div&gt; &lt;div class=&quot;Indented&quot;&gt; However, when working with hypergraphs it is not quite clear if one can reduce the total edges size of the graph to be even order of &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; n^{2} &lt;/script&gt; &lt;/span&gt;. Think about it, potentially the number of edges in a hypergraph can be &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; 2^{n} &lt;/script&gt; &lt;/span&gt;, so &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; n^{2} &lt;/script&gt; &lt;/span&gt; can be considered quite small for such hypergraphs. &lt;/div&gt; &lt;div class=&quot;Indented&quot;&gt; An interesting result from 2015, showed lower bound of &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; O(\epsilon^{-2}n\cdot r) &lt;/script&gt; &lt;/span&gt; edges for &lt;i&gt;r-&lt;/i&gt;uniform hypergraphs (assuming that &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; r&gt;\log\left(n\right) &lt;/script&gt; &lt;/span&gt;), which, when converting to total edges size is actually &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt; O(\epsilon^{-2}n\cdot r^{2}) &lt;/script&gt; &lt;/span&gt;. &lt;/div&gt; &lt;div class=&quot;Indented&quot;&gt; The question that one can ask now is, can we do better? Is there an algorithm that can construct a cut-sparsifier for hypergraphs with &lt;i&gt;smaller&lt;/i&gt; total edges size? &lt;/div&gt; &lt;div class=&quot;Indented&quot;&gt; That is, actually, an open question which is studied nowdays. &lt;/div&gt;</content><author><name>Eran Amar</name></author><summary type="html"></summary></entry></feed>